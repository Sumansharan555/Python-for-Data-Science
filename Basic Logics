{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5cb8c0f1-10db-43ed-876c-cedf5ea216b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter  the number 100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Factorial of number is 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000\n"
     ]
    }
   ],
   "source": [
    "# wap for factorial of a number using for loop\n",
    "n= int(input(\"enter  the number\"))\n",
    "fact=1\n",
    "for i in range(1,n+1):\n",
    "    fact=fact*i\n",
    "print(\"Factorial of number is\",fact)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f05872c1-1133-4c6a-a349-0bf28765ae9b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter a number 11\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number is  prime\n"
     ]
    }
   ],
   "source": [
    "#wap to check whether a given number is prime or not\n",
    "n=int(input(\"enter a number\"))\n",
    "if n==0 or n==1:\n",
    "    print(\"number is not prime\")\n",
    "elif n>1:\n",
    "    for i in range(2,n):\n",
    "        if n%i==0:\n",
    "             print(\"number is not prime\" )\n",
    "             break\n",
    "    else:\n",
    "           print(\"number is  prime\")\n",
    "else:\n",
    "    print(\"number is not prime\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e2773233-87e6-4e90-80a9-a901e25bd47a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter a number 45\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "reverse of given number= 54\n"
     ]
    }
   ],
   "source": [
    "#wap to find reverse of a number\n",
    "n=int(input(\"enter a number\"))\n",
    "rev=0\n",
    "while(n>0):\n",
    "    rev=(rev*10)+n%10\n",
    "    n=n//10\n",
    "print(\"reverse of given number=\",rev)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "efccd4b3-e64d-4094-ba6a-7bf89e0f0d10",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter a number 222\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "reverse of given number= 222\n",
      "number is palindrome\n"
     ]
    }
   ],
   "source": [
    "# wap to check whether the number is palindrome or not\n",
    "n=int(input('enter a number'))\n",
    "rev=0\n",
    "x=n\n",
    "while(n>0):\n",
    "    rev=(rev*10)+n%10\n",
    "    n=n//10\n",
    "print(\"reverse of given number=\",rev)\n",
    "\n",
    "if rev == x:\n",
    "    print('number is palindrome')\n",
    "else:\n",
    "    print('number is not palindrome')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4532578e-3e72-4980-ba46-ecd2213da244",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter a number 454\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "reverse of given number= 454\n",
      "number is palindrome\n"
     ]
    }
   ],
   "source": [
    "num=int(input('enter a number'))\n",
    "rev=0\n",
    "k=num\n",
    "while(num>0):\n",
    "    rev=(rev*10)+num%10\n",
    "    num=num//10\n",
    "print(\"reverse of given number=\",rev)\n",
    "\n",
    "if rev == k:\n",
    "    print('number is palindrome')\n",
    "else:\n",
    "    print('number is not palindrome')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71ad5390-6221-4d54-8081-c6b1f589f578",
   "metadata": {},
   "outputs": [],
   "source": [
    "# wap \n",
    "n= int(input('enter a number'))\n",
    "sum=0\n",
    "k=n\n",
    "while(n>0):\n",
    "    sum=sum +\n",
    "    n=n//10\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "37938dff-ca0d-4ae0-a45d-ad1cdae0bddf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter a number 153\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number is armstrong\n"
     ]
    }
   ],
   "source": [
    "# wap to check whether the number is armstrong or not\n",
    "n= int(input('enter a number'))\n",
    "sum=0\n",
    "x=n\n",
    "while(n>0):\n",
    "    sum=sum +(n%10)*(n%10)*(n%10)\n",
    "    n=n//10\n",
    "if  x == sum:\n",
    "    print('number is armstrong')\n",
    "else:\n",
    "    print('number is not armstrong')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "83a92e88-7374-4106-8c46-20c9fa374bbc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# fibonacci"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "eefe2e3f-d601-4d8a-96f7-49f8a350bd0e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter the rows 5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*\n",
      "**\n",
      "***\n",
      "****\n",
      "*****\n"
     ]
    }
   ],
   "source": [
    "#wap to print pattern\n",
    "'''\n",
    "*\n",
    "**\n",
    "***\n",
    "****\n",
    "*****\n",
    "'''\n",
    "n= int(input(\"enter number of rows\"))\n",
    "for i in range(1,n+1):\n",
    "    for j in range (1,i+1):\n",
    "        print(\"*\",end=\"\")\n",
    "    print()        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1086b518-fcb1-4b7d-a8a0-54acd5e42927",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "donald trump\n"
     ]
    }
   ],
   "source": [
    "# a function is defined using \n",
    "def my_function (fname):\n",
    "    print(fname + \"trump\")\n",
    "\n",
    "my_function(\"donald\" +\" \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ea2463aa-d0ef-4665-b0fa-8cd6609449ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello from a function\n"
     ]
    }
   ],
   "source": [
    "def my_function():\n",
    "    print(\"hello from a function\")\n",
    "\n",
    "my_function()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aaf0bd3f-9100-4bb1-9d44-3277564bfcf6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
