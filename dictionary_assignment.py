# -*- coding: utf-8 -*-
"""dictionary.assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14jsluy42M0OALl6vZwsNrsP9KWa5DTuP
"""



# 1. Python | Sort Python Dictionaries by Key or Value
car={"brand": "Ford",
  "model": "Mustang",
  "year": 1964}
x = dict(sorted(car.items()))
x

# 2.  Handling missing keys in Python dictionaries
car={"brand": "Ford",
  "model": "Mustang",
  "year": 1964}

x=car.get("color","red")
print(x)
value=car.setdefault("color","red")
print(car)

# 3. Python dictionary with keys having multiple inputs
dict1={
    'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')
}
dict1

# 4. Python program to find the sum of all items in a dictionary
dict1={
    'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')
}
print(sum(dict1['age']))

# 5. Python program to find the size of a Dictionary
dict1={
    'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')
}
print(len(dict1))

# 6. Ways to sort list of dictionaries by values in Python – Using itemg etter
from operator import itemgetter
dict1={
    'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')
}
print(sorted(dict1,key=itemgetter('age')))
print(dict(sorted(dict1.items())))

# 7. Ways to sort list of dictionaries by values in Python – Using lambda function
dict1={
    'name': ('Alice', 'Bob', 'Charlie'),  'city': ('New York', 'San Francisco', 'Chicago')
}
print(sorted(dict1.items(),key=lambda x:x[1]))

# 8. Python | Merging two Dictionaries
dict1={
    'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')
}
dict2={"brand": "Ford",
  "model": "Mustang",
  "year": 1964}
dict3=dict1.copy()
dict3.update(dict2)
dict3

# 9. Program to create grade calculator in Python
def calculate_grade(score):
   if score >=90 :
    return "A"
   elif score >=80:
       return "B"
   elif score >=70:
          return "C"
   elif score >=60:
    return "D"
   else:
    return "F"
   score =int(input("enter your score"))
   grade = calculate_grade(score)
   print(f"your grade is {grade}")

# 10. Python – Insertion at the beginning in OrderedDict
from collections import OrderedDict
dict1={
    'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')
}
dict1.update({'color':('red','blue','green')})
dict2 = orderedDict(dict1)
dict2





# 11. Python | Check order of character in string using OrderedDict( )
from collections import OrderedDict
def checkOrder(input, pattern):
    dict = OrderedDict.fromkeys(input)

#12. Python | Find common elements in three sorted arrays by dictionary intersection
array1 = [1,2,3,4]
array2 = [2,3,4,5]
array3 = [3,4,5,6]
array5 = {x for x in array1 if x in array2 and x in array3}
array5

#13. Dictionary and counter in Python to find winner of election
votes = ["Marie","Bob","julie","john","john","jack","jack","Marie","john","john","julie","jack","Bob"]
from collections import Counter
vote_count = Counter(votes)
vote_count

#14.Python – Key with maximum unique values
dict1 = {'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')}
max_unique_values = max(dict1.items(), key=lambda x: len(set(x[1])))
max_unique_values

#15. Find all duplicate characters in string
string = "hello world"
duplicates = {}
for char in string:
    if char in duplicates:
        duplicates[char] += 1
    else:
        duplicates[char] = 1
print(duplicates)

#16. Python – Group Similar items to Dictionary Values List
dict1 = {'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')}
dict2 = {}
for key,value in dict1.items():
    dict2.setdefault(tuple(value),[]).append(key)
dict2

#17. K’th Non-repeating Character in Python using List Comprehension and OrderedDict
dict1 = {'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')}
dict2 = {}

#18. Python – Replace String by Kth Dictionary value
dict1 = {'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')}
dict2 = {}

#19. Python | Ways to remove a key from dictionary
dict1 = {'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')}
del dict1['name']
dict1
#way 2
dict1 = {'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')}
dict1.pop('name')
dict1
# way 3
dict1 = {'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')}
dict1 = {key: value for key, value in dict1.items() if key != 'name'}
dict1

#20. Python – Replace words from Dictionary
dict1 = {'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')}
replace_dict = {'name': 'John', 'city': 'Paris'}
for key, value in replace_dict.items():
  dict1[key] = value
dict1

#21. Python – Remove Dictionary Key Words
dict1 = {'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')}
remove_keys = ['name', 'age']
for key in remove_keys:
  dict1.pop(key)
dict1

#22. Python | Remove all duplicates words from a given sentence
sentence = "hello world hello world"
words = sentence.split()
unique_words = set(words)
unique_sentence = " ".join(unique_words)
unique_sentence

#23. Python – Remove duplicate values across Dictionary Values
D1 = {"a": [1, 2, 3], "b": [2, 3, 4], "c": [23, 4, 5]}
duplicate_values = set()
D2 = {}
for key, value in D1.items():
  unique_values = [x for x in value if x not in duplicate_values]
  duplicate_values.update(value)
  D2[key] = unique_values
D2

#24. Python Dictionary to find mirror characters in a string
dict1 = {'a': 'z', 'b': 'y', 'c': 'x','y':'b','z':'a'}
str1="abc"
mirror_str = ""
for char in str1:
  mirror_str += dict1[char]
mirror_str

#25. Counting the frequencies in a list using dictionary in Python
l1 = [1, 2, 3, 4, 2, 3, 1, 4, 5, 6, 2, 3]
dict1 = {}
for item in l1:
  if item in dict1:
    dict1[item] += 1
  else:
    dict1[item] = 1
dict1

#26. Python – Dictionary Values Mean
dict1 = {"a": [1, 2, 3], "b": [2, 3, 4], "c": [3, 4, 5]}
dict2 = {}
for key, value in dict1.items():
  dict2[key] = sum(value) / len(value)
print(dict2)

#27. Python counter and dictionary intersection example (Make a string using deletion and rearrangement)
from collections import Counter

#28. Python dictionary, set and counter to check if frequencies can become same
from collections import Counter
dict1 = {'a': 1, 'b': 2, 'c': 2, 'd': 1, 'e': 3}
counter = Counter(dict1.values())
if len(counter) <= 2 and (counter.most_common()[0][1] == 1 or (len(counter) == 2 and abs(counter.most_common()[0][1] - counter.most_common()[1][1]) == 1)):
  print("yes")
counter

#29. Scraping And Finding Ordered Words In A Dictionary using Python
dict1 = {'name': ('Alice', 'Bob', 'Charlie'), 'car':('mustang','camaro','subaru'), 'city': ('New York', 'San Francisco', 'Chicago')}
l1=list(dict1.values())
ordered_words = []
for word in l1:
  is_ordered = True
  for i in range(len(word) - 1):
    if word[i] > word[i + 1]:
      is_ordered = False
      break
  if is_ordered:
    ordered_words.append(word)
ordered_words

#30. Possible Words using given characters in Python

#31. Python – Maximum record value key in dictionary
#D1 = {"a": 1, "b": {"c": 2, "d": 3}, "e": 4}
#max_value = max(D1.values())
#max_value
H1 = {"a": [1, 2, 3], "b": [2, 3, 4], "c": [3, 4, 5]}
H2 = {}
for key, value in H1.items():
  H2[key] = max(value)
  H3 = max(H2, key=H2.get)
print(H2)

#32. Python – Extract values of Particular Key in Nested Values
D1 = {"a": 1, "b": {"c": 2, "d": 3}, "e": 4}
D2 = D1["b"]
D3 = list(D2.values())
print(D3)

